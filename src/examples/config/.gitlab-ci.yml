default:
  tags:
    - shared-runner-sig-products 

stages:
  - build
  # Remark. I once used custom stages, e.g. "sast", "sca", instead of "test" which ended up in
  # an odd maven error, a wrong MAVEN_CONFIG value for the path to .m2.
  # Given that, we should use defult stages instead for the safe side.  
  - test
  - deploy

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  # We have to add java modules to the whitelist --add-opens to workaround 
  # a known JDK17 security restriction
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository
               -Dmaven.artifact.threads=50
               --add-opens java.base/java.lang=ALL-UNNAMED
               --add-opens java.base/java.lang.reflect=ALL-UNNAMED
               --add-opens java.base/java.util=ALL-UNNAMED               
               --add-opens java.base/java.util.regex=ALL-UNNAMED
               --add-opens java.base/java.net=ALL-UNNAMED"
  # Unset this env variable to work around a maven issue on conflicting env variable
  MAVEN_CONFIG: ""

cache:
  paths:
    - .m2/repository/
    - cov-intermediate/

build-job:
  stage: build
  rules:
    - if: $MK_SKIP_BUILD != "true"
  script:
    - echo "Code is being built now!"
    # Unfortunately some unit test fails and we have to ignore them
    - ./mvnw -e -Dmaven.test.failure.ignore=true clean install

test-sast:
  stage: test
  rules:
    - if: $MK_SKIP_SAST != "true"
  before_script:
    # Path resolution and auth-key permissions handles by CMD in Dockerfile now
    #- export PATH=/opt/coverity/$COV_VERSION/bin:$PATH
    # Restrict non-owner access; otherwise cov-commit-defects does not allow you to commit
    #- chmod 400 /opt/coverity/auth-key.txt
    # Might be overkill but to make sure that Coverity Analysis runs synchronusly  
    - export COVERITY_CLI_CLOUD_ANALYSIS_ASYNC=false
    # Run only after cov-analyze version update to workaround version unmatch error
    #- rm -rf cov-intermediate
  script:
    - echo "SAST testing is executed now!"
    - eval "$COV_CONFIGURE_JAVA"
    - eval "$COV_BUILD $COV_BUILD_PARAMS"
    # Use node-unlocked license to cope with the volatile MAC address
    - eval "$COV_ANALYZE $COV_ANALYZE_PARAMS"
    - eval $COV_COMMIT
    - sleep 20

# After SAST check
after-sast-node:
  stage: test
  needs: [test-sast]
  rules:
    - if: $MK_SKIP_SAST != "true"
  before_script:
    # git clone a typescript project together with a git submodule.
    # Install and build both git-cloned TS projects 'gitlab-ci-node' and its submodule 'synopsys-sig-node'
    - git clone --recurse-submodules https://github.com/sigjpengineers/gitlab-ci-node.git ./synopsys/src/node/gitlab-ci-node
    # Build the submodule 'synopsys-sig-node' prior to building dependant 'gitlab-ci-node'.
    - cd ./synopsys/src/node/gitlab-ci-node/src/synopsys-sig-node
    - npm install
    - tsc -p ./tsconfig.json
    # Build the dependant 'gitlab-ci-node' then.
    - cd $CI_PROJECT_DIR/synopsys/src/node/gitlab-ci-node
    - npm install
    - tsc -p ./tsconfig.json
    - cd $CI_PROJECT_DIR
  script:
    - echo "Checking results from SAST now (nodejs mode)!"
    - ts-node ./synopsys/src/node/gitlab-ci-node/src/coverity-update-comment.ts
    - ts-node ./synopsys/src/node/gitlab-ci-node/src/coverity-create-artifacts.ts
  artifacts:
    paths:
      - $COV_ISSUEFILE_PATH
    expire_in: 1 week
   
test-sca:
  stage: test
  variables:
    BD_SCAN_PARAMS_OPT: "dummy-params"
  rules:
    - if: $BD_SCAN_TYPE == "light"
      variables:
        BD_SCAN_PARAMS_OPT: "$BD_SCAN_PARAMS_OPT_LIGHT"
    - if: $BD_SCAN_TYPE == "heavy"
      variables:
        BD_SCAN_PARAMS_OPT: "$BD_SCAN_PARAMS_OPT_HEAVY"
    - if: $BD_SCAN_TYPE == "binary"
      variables:
        BD_SCAN_PARAMS_OPT: "$BD_SCAN_PARAMS_OPT_BINARY"
  before_script:
    - export DETECT_LATEST_RELEASE_VERSION=$BD_DETECT_VERSION
    - |-
      if [[ $BD_SCAN_PARAMS_ADDED != "" ]]; then
        BD_SCAN_PARAMS_OPT="$BD_SCAN_PARAMS_OPT $BD_SCAN_PARAMS_ADDED"
      fi
    - echo "BD optional parameters $BD_SCAN_PARAMS_OPT"
  script:
    - echo "SCA testing is executed now!"
    - eval "$BD_SCAN_RUN_DETECT $BD_SCAN_PARAMS_REQUIRED $BD_SCAN_PARAMS_OPT"
    - sleep 20

deploy-prod:
  stage: deploy
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
